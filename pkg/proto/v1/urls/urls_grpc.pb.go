// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: api/v1/proto/urls.proto

package urls

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	URLsShortener_ShortURL_FullMethodName  = "/urls.v1.URLsShortener/ShortURL"
	URLsShortener_BatchURLs_FullMethodName = "/urls.v1.URLsShortener/BatchURLs"
)

// URLsShortenerClient is the client API for URLsShortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLsShortenerClient interface {
	// Shorts the URL.
	//
	// The saved value of the shortened URL will be returned if a raw value is found.
	// Error is returned if URL is invalid.
	ShortURL(ctx context.Context, in *ShortURLRequest, opts ...grpc.CallOption) (*ShortURLResponse, error)
	// Saves a batch of URLs.
	BatchURLs(ctx context.Context, in *BatchURLsRequest, opts ...grpc.CallOption) (*BatchURLsResponse, error)
}

type uRLsShortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewURLsShortenerClient(cc grpc.ClientConnInterface) URLsShortenerClient {
	return &uRLsShortenerClient{cc}
}

func (c *uRLsShortenerClient) ShortURL(ctx context.Context, in *ShortURLRequest, opts ...grpc.CallOption) (*ShortURLResponse, error) {
	out := new(ShortURLResponse)
	err := c.cc.Invoke(ctx, URLsShortener_ShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsShortenerClient) BatchURLs(ctx context.Context, in *BatchURLsRequest, opts ...grpc.CallOption) (*BatchURLsResponse, error) {
	out := new(BatchURLsResponse)
	err := c.cc.Invoke(ctx, URLsShortener_BatchURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLsShortenerServer is the server API for URLsShortener service.
// All implementations must embed UnimplementedURLsShortenerServer
// for forward compatibility
type URLsShortenerServer interface {
	// Shorts the URL.
	//
	// The saved value of the shortened URL will be returned if a raw value is found.
	// Error is returned if URL is invalid.
	ShortURL(context.Context, *ShortURLRequest) (*ShortURLResponse, error)
	// Saves a batch of URLs.
	BatchURLs(context.Context, *BatchURLsRequest) (*BatchURLsResponse, error)
	mustEmbedUnimplementedURLsShortenerServer()
}

// UnimplementedURLsShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedURLsShortenerServer struct {
}

func (UnimplementedURLsShortenerServer) ShortURL(context.Context, *ShortURLRequest) (*ShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortURL not implemented")
}
func (UnimplementedURLsShortenerServer) BatchURLs(context.Context, *BatchURLsRequest) (*BatchURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchURLs not implemented")
}
func (UnimplementedURLsShortenerServer) mustEmbedUnimplementedURLsShortenerServer() {}

// UnsafeURLsShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLsShortenerServer will
// result in compilation errors.
type UnsafeURLsShortenerServer interface {
	mustEmbedUnimplementedURLsShortenerServer()
}

func RegisterURLsShortenerServer(s grpc.ServiceRegistrar, srv URLsShortenerServer) {
	s.RegisterService(&URLsShortener_ServiceDesc, srv)
}

func _URLsShortener_ShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsShortenerServer).ShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLsShortener_ShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsShortenerServer).ShortURL(ctx, req.(*ShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLsShortener_BatchURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsShortenerServer).BatchURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLsShortener_BatchURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsShortenerServer).BatchURLs(ctx, req.(*BatchURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// URLsShortener_ServiceDesc is the grpc.ServiceDesc for URLsShortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLsShortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urls.v1.URLsShortener",
	HandlerType: (*URLsShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortURL",
			Handler:    _URLsShortener_ShortURL_Handler,
		},
		{
			MethodName: "BatchURLs",
			Handler:    _URLsShortener_BatchURLs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/proto/urls.proto",
}

const (
	URLsProvider_GetShortenedURL_FullMethodName = "/urls.v1.URLsProvider/GetShortenedURL"
	URLsProvider_ListURLs_FullMethodName        = "/urls.v1.URLsProvider/ListURLs"
)

// URLsProviderClient is the client API for URLsProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLsProviderClient interface {
	// Get the shortened URL.
	GetShortenedURL(ctx context.Context, in *GetShortenedURLRequest, opts ...grpc.CallOption) (*GetShortenedURLResponse, error)
	// Collects shortened URLs.
	ListURLs(ctx context.Context, in *ListURLsRequest, opts ...grpc.CallOption) (*ListURLsResponse, error)
}

type uRLsProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewURLsProviderClient(cc grpc.ClientConnInterface) URLsProviderClient {
	return &uRLsProviderClient{cc}
}

func (c *uRLsProviderClient) GetShortenedURL(ctx context.Context, in *GetShortenedURLRequest, opts ...grpc.CallOption) (*GetShortenedURLResponse, error) {
	out := new(GetShortenedURLResponse)
	err := c.cc.Invoke(ctx, URLsProvider_GetShortenedURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsProviderClient) ListURLs(ctx context.Context, in *ListURLsRequest, opts ...grpc.CallOption) (*ListURLsResponse, error) {
	out := new(ListURLsResponse)
	err := c.cc.Invoke(ctx, URLsProvider_ListURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLsProviderServer is the server API for URLsProvider service.
// All implementations must embed UnimplementedURLsProviderServer
// for forward compatibility
type URLsProviderServer interface {
	// Get the shortened URL.
	GetShortenedURL(context.Context, *GetShortenedURLRequest) (*GetShortenedURLResponse, error)
	// Collects shortened URLs.
	ListURLs(context.Context, *ListURLsRequest) (*ListURLsResponse, error)
	mustEmbedUnimplementedURLsProviderServer()
}

// UnimplementedURLsProviderServer must be embedded to have forward compatible implementations.
type UnimplementedURLsProviderServer struct {
}

func (UnimplementedURLsProviderServer) GetShortenedURL(context.Context, *GetShortenedURLRequest) (*GetShortenedURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortenedURL not implemented")
}
func (UnimplementedURLsProviderServer) ListURLs(context.Context, *ListURLsRequest) (*ListURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListURLs not implemented")
}
func (UnimplementedURLsProviderServer) mustEmbedUnimplementedURLsProviderServer() {}

// UnsafeURLsProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLsProviderServer will
// result in compilation errors.
type UnsafeURLsProviderServer interface {
	mustEmbedUnimplementedURLsProviderServer()
}

func RegisterURLsProviderServer(s grpc.ServiceRegistrar, srv URLsProviderServer) {
	s.RegisterService(&URLsProvider_ServiceDesc, srv)
}

func _URLsProvider_GetShortenedURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortenedURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsProviderServer).GetShortenedURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLsProvider_GetShortenedURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsProviderServer).GetShortenedURL(ctx, req.(*GetShortenedURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLsProvider_ListURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsProviderServer).ListURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLsProvider_ListURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsProviderServer).ListURLs(ctx, req.(*ListURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// URLsProvider_ServiceDesc is the grpc.ServiceDesc for URLsProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLsProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urls.v1.URLsProvider",
	HandlerType: (*URLsProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShortenedURL",
			Handler:    _URLsProvider_GetShortenedURL_Handler,
		},
		{
			MethodName: "ListURLs",
			Handler:    _URLsProvider_ListURLs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/proto/urls.proto",
}

const (
	URLsDeleter_DelURLs_FullMethodName = "/urls.v1.URLsDeleter/DelURLs"
)

// URLsDeleterClient is the client API for URLsDeleter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLsDeleterClient interface {
	// Deletes shortened URLs.
	DelURLs(ctx context.Context, in *DelURLsRequest, opts ...grpc.CallOption) (*DelURLsResponse, error)
}

type uRLsDeleterClient struct {
	cc grpc.ClientConnInterface
}

func NewURLsDeleterClient(cc grpc.ClientConnInterface) URLsDeleterClient {
	return &uRLsDeleterClient{cc}
}

func (c *uRLsDeleterClient) DelURLs(ctx context.Context, in *DelURLsRequest, opts ...grpc.CallOption) (*DelURLsResponse, error) {
	out := new(DelURLsResponse)
	err := c.cc.Invoke(ctx, URLsDeleter_DelURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLsDeleterServer is the server API for URLsDeleter service.
// All implementations must embed UnimplementedURLsDeleterServer
// for forward compatibility
type URLsDeleterServer interface {
	// Deletes shortened URLs.
	DelURLs(context.Context, *DelURLsRequest) (*DelURLsResponse, error)
	mustEmbedUnimplementedURLsDeleterServer()
}

// UnimplementedURLsDeleterServer must be embedded to have forward compatible implementations.
type UnimplementedURLsDeleterServer struct {
}

func (UnimplementedURLsDeleterServer) DelURLs(context.Context, *DelURLsRequest) (*DelURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelURLs not implemented")
}
func (UnimplementedURLsDeleterServer) mustEmbedUnimplementedURLsDeleterServer() {}

// UnsafeURLsDeleterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLsDeleterServer will
// result in compilation errors.
type UnsafeURLsDeleterServer interface {
	mustEmbedUnimplementedURLsDeleterServer()
}

func RegisterURLsDeleterServer(s grpc.ServiceRegistrar, srv URLsDeleterServer) {
	s.RegisterService(&URLsDeleter_ServiceDesc, srv)
}

func _URLsDeleter_DelURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsDeleterServer).DelURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLsDeleter_DelURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsDeleterServer).DelURLs(ctx, req.(*DelURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// URLsDeleter_ServiceDesc is the grpc.ServiceDesc for URLsDeleter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLsDeleter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urls.v1.URLsDeleter",
	HandlerType: (*URLsDeleterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelURLs",
			Handler:    _URLsDeleter_DelURLs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/proto/urls.proto",
}
