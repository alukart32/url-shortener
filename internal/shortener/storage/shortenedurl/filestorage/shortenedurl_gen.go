package filestorage

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ShortenedURL) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "slug":
			z.Slug, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Slug")
				return
			}
		case "userID":
			z.UserID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "corrID":
			z.CorrID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CorrID")
				return
			}
		case "value":
			z.Value, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "Raw":
			z.Raw, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Raw")
				return
			}
		case "is_deleted":
			z.IsDeleted, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsDeleted")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShortenedURL) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "slug"
	err = en.Append(0x86, 0xa4, 0x73, 0x6c, 0x75, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Slug)
	if err != nil {
		err = msgp.WrapError(err, "Slug")
		return
	}
	// write "userID"
	err = en.Append(0xa6, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserID)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	// write "corrID"
	err = en.Append(0xa6, 0x63, 0x6f, 0x72, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.CorrID)
	if err != nil {
		err = msgp.WrapError(err, "CorrID")
		return
	}
	// write "value"
	err = en.Append(0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	// write "Raw"
	err = en.Append(0xa3, 0x52, 0x61, 0x77)
	if err != nil {
		return
	}
	err = en.WriteString(z.Raw)
	if err != nil {
		err = msgp.WrapError(err, "Raw")
		return
	}
	// write "is_deleted"
	err = en.Append(0xaa, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsDeleted)
	if err != nil {
		err = msgp.WrapError(err, "IsDeleted")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShortenedURL) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "slug"
	o = append(o, 0x86, 0xa4, 0x73, 0x6c, 0x75, 0x67)
	o = msgp.AppendString(o, z.Slug)
	// string "userID"
	o = append(o, 0xa6, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.UserID)
	// string "corrID"
	o = append(o, 0xa6, 0x63, 0x6f, 0x72, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.CorrID)
	// string "value"
	o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendString(o, z.Value)
	// string "Raw"
	o = append(o, 0xa3, 0x52, 0x61, 0x77)
	o = msgp.AppendString(o, z.Raw)
	// string "is_deleted"
	o = append(o, 0xaa, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64)
	o = msgp.AppendBool(o, z.IsDeleted)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShortenedURL) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "slug":
			z.Slug, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Slug")
				return
			}
		case "userID":
			z.UserID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "corrID":
			z.CorrID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CorrID")
				return
			}
		case "value":
			z.Value, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "Raw":
			z.Raw, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Raw")
				return
			}
		case "is_deleted":
			z.IsDeleted, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsDeleted")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShortenedURL) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Slug) + 7 + msgp.StringPrefixSize + len(z.UserID) + 7 + msgp.StringPrefixSize + len(z.CorrID) + 6 + msgp.StringPrefixSize + len(z.Value) + 4 + msgp.StringPrefixSize + len(z.Raw) + 11 + msgp.BoolSize
	return
}
